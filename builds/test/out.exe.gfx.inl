// Generated with Shader Minifier 1.3.6 (https://github.com/laurentlb/Shader_Minifier/)
#ifndef SHADER_MINIFIER_IMPL
#ifndef SHADER_MINIFIER_HEADER
# define SHADER_MINIFIER_HEADER
# define VAR_backBuffer0 "v"
# define VAR_outColor0 "c"
# define VAR_waveOutPosition "m"
#endif
#else // if SHADER_MINIFIER_IMPL
// graphics_fragment_shader.i
"#version 430\n"
 "layout(binding=0) uniform sampler2D v;"
 "layout(location=0) uniform int m;"
 "vec2 f=vec2(1920,1080);"
 "float a=m/4.8e4;"
 "layout(location=0) out vec4 c;"
 "float x;"
 "int i;"
 "const float y=acos(-1.),s=y*2.,z=y*(3.-sqrt(5.));"
 "const vec3 d=vec3(255,137,14)/255.,l=vec3(191,211,255)/255.;"
 "vec2 n(float v)"
 "{"
   "return vec2(cos(v),sin(v));"
 "}"
 "mat2 t(float v)"
 "{"
   "vec2 u=n(v);"
   "return mat2(u.x,u.y,-u.y,u.x);"
 "}"
 "bool n(float v,float m,out float y)"
 "{"
   "y=(x-v)/(m-v);"
   "return 0.<=y&&y<1.;"
 "}"
 "vec3 p(vec3 v)"
 "{"
   "uvec3 u=floatBitsToUint(v);"
   "u=(u>>8U^u.yzx)*1103515245u;"
   "u=(u>>8U^u.yzx)*1103515245u;"
   "u=(u>>8U^u.yzx)*1103515245u;"
   "return vec3(u)/float(-1u);"
 "}"
 "vec3 h(vec2 v)"
 "{"
   "vec2 m=floor(v),u=fract(v);"
   "u=u*u*(3.-2.*u);"
   "vec3 x=mix(p(vec3(m,.12)),p(vec3(m+vec2(1,0),.12)),u.x),y=mix(p(vec3(m+vec2(0,1),.12)),p(vec3(m+vec2(1),.12)),u.x);"
   "return mix(x,y,u.y);"
 "}"
 "vec3 e(vec2 v)"
 "{"
   "const mat2 m=t(z)*2.;"
   "float y=1.;"
   "vec4 u=vec4(0);"
   "for(int f=0;f<6;f++)"
     "u+=y*vec4(h(v),1),y*=.5,v*=m;"
   "return u.xyz/u.w;"
 "}"
 "float r(float v)"
 "{"
   "return v*v*(v*v)*v;"
 "}"
 "vec3 e(vec3 v,float u,float m,vec3 x,vec3 f,vec3 z)"
 "{"
   "float c=m*m;"
   "c=max(c,.001);"
   "vec3 i=.04*(1.-u)+v*u,l=normalize(x+f);"
   "float s=clamp(dot(z,f),0.,1.)+1e-5,a=clamp(dot(z,x),0.,1.),n=clamp(dot(z,l),0.,1.),o=clamp(dot(x,l),0.,1.),p=n*c,d=c/(1.-n*n+p*p),e=c*c,b=.5+2.*c*o*o;"
   "return(d*d/y*(.5/(a*sqrt(max(0.,s*s*(1.-e)+e))+s*sqrt(max(0.,a*a*(1.-e)+e))))*(i+(1.-i)*r(1.-o))+v*(1.-u)*((1.+(b-1.)*r(1.-a))*(1.+(b-1.)*r(1.-s))/y))*a;"
 "}"
 "float e(float v,float x,float y)"
 "{"
   "return min(v,x);"
 "}"
 "float h(float v,float x,float y)"
 "{"
   "return max(v,-x);"
 "}"
 "float e(vec3 v,vec3 y)"
 "{"
   "vec3 u=abs(v)-y*.5;"
   "return min(max(u.x,max(u.y,u.z)),0.)+length(max(u,0.));"
 "}"
 "const vec2 u=vec2(6,4)*.5;"
 "vec2 w(inout vec3 v)"
 "{"
   "vec2 m=floor(v.xy/u)*u+u*.5;"
   "v.xy=mod(v.xy,u)-.5*u;"
   "return m;"
 "}"
 "float b(vec3 v)"
 "{"
   "vec3 m=v;"
   "vec2 f=w(v);"
   "vec3 c=p(vec3(f,0));"
   "float z,l;"
   "vec3 a;"
   "bool d=fract(.5*f.x/u.x)<.5;"
   "float o=float(!d)*1e9,b=float(d)*1e9;"
   "a=abs(fract(m*10.)-.5);"
   "float g=dot(vec3(1),smoothstep(.04,.02,a))/3.*.001;"
   "const float r=u.x*.2;"
   "float B=min(max((v.x--u.x*.5-r)/(u.x*.5-r--u.x*.5-r),0.),1.)*u.y+u.y*.25,t=v.y-B,C=min(min(max((min(abs(t),abs(t+u.y))-u.y*.25)*(r*2./sqrt(u.y*u.y+r*r*4.)),-v.z),-v.z+3.),max(abs(v.x)-u.x*.5+r,-v.z+.5));"
   "C+=g;"
   "a=v-vec3(-u.x*.45,0,-.07);"
   "a.x=abs(a.x-.1)-.1;"
   "C=min(C,length(a.xz)-.07);"
   "a.y=abs(fract(a.y)-.5)-.06;"
   "C=min(C,e(a+vec3(.1,0,0),vec3(.05,0,0))-.01);"
   "vec2 A=abs(vec2(length(a.xz),a.y))-vec2(.08,.02);"
   "C=min(C,min(max(A.x,A.y),0.)+length(max(A,0.)));"
   "C+=o;"
   "float D=-v.z;"
   "D=h(D,e(v,vec3(u-.2,4)),.01);"
   "a=v-vec3(0,0,.75);"
   "a.x=abs(a.x);"
   "const vec2 E=u-.2;"
   "D=e(D,e(a,vec3(E,.05)),.01);"
   "const vec3 F=vec3(E.x*.25-.125,E.y*.75,.1);"
   "D=h(D,e(a-vec3(F.x*.5+.05,-F.y*.1,0),F),.01);"
   "const vec3 G=vec3(F.x,F.y*.5,F.z);"
   "D=h(D,e(a-vec3(G.x*1.5+.15,G.y*.3,0),G),.01);"
   "D=min(D,-.01+e(v-vec3(0,-u.y*.25,.1),vec3(u.x-.2,u.y*.3,.025)));"
   "a=v-vec3(0,-u.y*.25,.1);"
   "a.x=a.x-.2*clamp(round(a.x/.2),-6,6);"
   "D=h(D,e(a,vec3(.06,u.y*.25,.05)),.01);"
   "D=min(D,-.01+e(v-vec3(0,-u.y*.1-.025,0),vec3(u.x-.2,.05,.2)));"
   "z=-.01+e(v-vec3(1.1,-.77,-.02),vec3(.4,.28,.1));"
   "a=v-vec3(1.1,-.77,-.02)-vec3(-.06,0,-.1);"
   "z=h(z,e(a,vec3(0,0,.1))-.1,.005);"
   "a.z-=.05;"
   "z=min(z,length(a)-.015);"
   "const float H=y/32.;"
   "float I=atan(a.y,a.x);"
   "I=mod(I,H*2.)-H;"
   "a.xy=n(I)*length(a.xy);"
   "z=e(z,e(a,vec3(.2,0,0))-.002,.005);"
   "D=min(D,z);"
   "D+=b;"
   "float J=min(D,C),K=smoothstep(0.,1.5,.9-v.y);"
   "vec3 L=v;"
   "L.x*=mix(1.1,1.,K);"
   "float M=c.x*s,N=x*.5+M,O=cos(M+L.x*y*7.+.5*y*cos(L.x*7.))*.05+cos(L.x*2.+N*2.+.5*y*cos(N))*.05;"
   "L-=vec3(0,0,1.+O*K);"
   "z=e(L,vec3(u-.4,.01))*.5-.01;"
   "z+=b;"
   "i=z<J?"
     "1:"
     "0;"
   "J=min(J,z);"
   "l=length(v-vec3(sign(c.x-.5),-.09,0))-.1;"
   "l+=b;"
   "z=length(v-vec3(-u*.5+.1,2.9))-.1;"
   "z+=o;"
   "z=min(z,l);"
   "i=z<J?"
     "2:"
     "i;"
   "return min(J,z);"
 "}"
 "vec2 b(vec3 v,vec3 m,out vec3 a)"
 "{"
   "float f=1.,z=1e2,x,c=0.;"
   "for(int i=0;i<256;i++)"
     "{"
       "a=m+v*c;"
       "float l;"
       "if(n(90.,105.,l))"
         "a.z=abs(a.z)-2.;"
       "if(n(105.,120.,l))"
         "a.xz=vec2((atan(a.z,a.x)+y)/s*u.x*8.,length(a.xz)),a.z-=4.;"
       "x=b(a);"
       "float r=x*x/(2.*z),D=sqrt(x*x-r*r);"
       "f=min(f,D/(.02*max(0.,c-r)));"
       "z=x;"
       "vec2 d=(floor((a.xy+sign(v.xy)*u)/u)+.5)*u,C=abs(d-a.xy)-.5*u;"
       "C=max(C,0.)/abs(v.xy)+.001+float(a.z<-2.)*1e2;"
       "x=min(x,min(C.x,C.y));"
       "c+=x;"
       "if(x<.001)"
         "return vec2(1,.1);"
       "if(c>1e2)"
         "return vec2(0,max(f,.1));"
     "}"
   "return vec2(0,max(f,.1));"
 "}"
 "const vec3 o=normalize(vec3(1,1,-1));"
 "vec3 B(vec3 v)"
 "{"
   "vec2 a=vec2(atan(v.x,-v.z),acos(v.y)*2.)/s*20.+vec2(.05,.01)*x;"
   "vec3 u=vec3(mix(.1,.5,e(a).x)),f=mix(vec3(.01),u,clamp((v.y+.5)*.5,0.,1.));"
   "float y=clamp(dot(v,o),0.,1.);"
   "y=smoothstep(.8,1.,y);"
   "f*=mix(1.,3.,y);"
   "f=mix(f,vec3(1),pow(min(max((y*y-.995)/.005,0.),1.),5.));"
   "f*=min(max((v.y-1.)/-.1,0.),1.);"
   "return f;"
 "}"
 "void main()"
 "{"
   "x=a;"
   "const vec2 m=gl_FragCoord.xy,z=f.xy,D=m/z;"
   "const vec3 s=p(vec3(m,x));"
   "const vec2 C=(D-.5+(s.xy-.5)*.25/z)*2.*(z/min(z.x,z.y));"
   "vec3 r=vec3(1),F=vec3(0,0,-1),I;"
   "float L=0.,t=x/15.;"
   "int n=int(t)%8;"
   "L=fract(t);"
   "r=mix(vec3[](vec3(.2,.2,2.2),vec3(.4,.2,2),vec3(.8-u.x,-1,0),vec3(-.5,-1.8,-.3),vec3(0,0,-1),vec3(0,0,-3),vec3(0),vec3(0))[n],vec3[](vec3(.1,.1,1.5),vec3(.35,.6,.4),vec3(-.1,-1,0),vec3(.2-u.x,-1.8,-.3),vec3(0,0,-1),vec3(0,0,-3),vec3(0),vec3(0))[n],L);"
   "F=normalize(mix(vec3[](vec3(.5,1.5,1),vec3(-.5,-1,-1),vec3(-1,-.1,.3),vec3(1,.2,.8),vec3(0,0,1),vec3(0,0,1),vec3(-1,.2,0),vec3(0,1,0))[n],vec3[](vec3(.1,.1,1),vec3(0,0,-1),vec3(-1,-.1,.3),vec3(1,.2,.8),vec3(0,0,1),vec3(0,0,1),vec3(-1,-.2,0),vec3(0,1,1))[n],L));"
   "const vec3 g=(e(vec2(-4.2,x*.1))*2.-1.)*.05;"
   "r+=g;"
   "const vec3 J=normalize(cross(vec3(0,1,0),F));"
   "const mat3 A=mat3(J,normalize(cross(F,J)),F);"
   "I=normalize(A*vec3(C,1./tan(60.*y/360.)*(1.-length(C)*0.)));"
   "vec3 E;"
   "vec2 G=b(I,r,E);"
   "float K=length(E-r);"
   "const vec2 M=vec2(1,-1);"
   "int H=i;"
   "vec3 N=normalize(M.xyy*b(E+M.xyy*.001)+M.yyx*b(E+M.yyx*.001)+M.yxy*b(E+M.yxy*.001)+M.xxx*b(E+M.xxx*.001));"
   "i=H;"
   "vec3 O=sign(N)*abs(N);"
   "O/=dot(vec3(1),O);"
   "vec2 h=(O.x*E.zy+O.y*E.xz+O.z*E.xy)*vec2(3,1);"
   "vec3 P=E;"
   "vec2 Q=w(P);"
   "vec3 R=p(vec3(Q,0));"
   "float S=0.;"
   "vec3 T=vec3(1);"
   "float U=.5,V=.5;"
   "vec3 W=(step(R.y,.9)*.8+.2)*mix(d,l,R.x);"
   "if(i==0)"
     "{"
       "vec3 X=e(h*3.),Y=e(h*96.);"
       "T=vec3(clamp(1.3*mix(.6,1.,X.y)*mix(.8,1.,pow(Y.x,3.)),0.,1.));"
       "U=mix(.5,1.,pow(X.y,3.));"
       "V=.01;"
       "N=normalize(N+(X*2.-1.)*.05);"
     "}"
   "else if(i==1)"
     "T=vec3[](vec3(.8,.7,.6),vec3(.8,.2,.2),vec3(.5,.7,.8))[int(R.x*3.)],U=.99,V=.01;"
   "else"
     " S=1.,T=W;"
   "E+=N*.001*2.;"
   "vec3 X;"
   "vec2 Y=b(o,E,X);"
   "vec3 Z=vec3(0);"
   "Z+=Y.y*e(T,V,U,o,-I,N)*l;"
   "vec3 _=(fract(.5*Q.x/u.x)<.5?"
     "vec3(-u*.5+.1,2.9):"
     "vec3(sign(R.x-.5),-.06,0))-P;"
   "float j=length(_);"
   "Z+=W*pow(1./(1.+max(0.,j)),2.)*e(T,V,U,_/j,-I,N);"
   "Z*=sqrt(clamp(b(E+N*.05)/.05,0.,1.));"
   "Z=mix(Z,T,S);"
   "vec4 k=mix(vec4(B(I),100),vec4(Z,K),G.x);"
   "vec3 q=k.xyz;"
   "q+=s*.03;"
   "q=pow(q,vec3(.8));"
   "q=q*(2.51*q+.03)/(q*(2.43*q+.59)+.14);"
   "q.x=smoothstep(-.05,1.05,q.x);"
   "q*=clamp((.5-abs(L-.5))*10.,0.,1.);"
   "k.xyz=q;"
   "c=mix(k,texture(v,D),.5);"
 "}" 
#endif

